generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(uuid())
  email                  String           @unique
  name                   String?
  password               String           // Ahora es obligatorio
  externalId             String           @unique
  role                   UserRole         @default(USER)  // Default role for new users
  subscriptionTier       SubscriptionTier @default(FREE)  // Renombrado de isSubscribed
  subscriptionExpiresAt  DateTime?
  points                 Int              @default(0)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  lastAccessAt           DateTime         @default(now())
  expiresAt              DateTime?
  isVIP                  Boolean          @default(false)
  invitationCode         String?          @unique
  invitedBy              String?
  conversations          Conversation[]
  transactions           Transaction[]
  feedback               Feedback[]
  usedInvitationCode     InvitationCode?  @relation("UsedBy")
  createdInvitationCodes InvitationCode[] @relation("CreatedBy")
}

enum UserRole {
  ADMIN
  USER
  FREE
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

model Conversation {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  feedback  Feedback[]
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  role           String
  content        String       @db.Text
  createdAt      DateTime     @default(now())
}

model Transaction {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  paymentId         String
  amount            Float
  type              String
  status            String
  externalReference String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model VendorCredentials {
  id       String  @id @default(uuid())
  vendorId String  @unique
  apiKey   String
  secret   String?
}

model Feedback {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  rating         String
  comment        String?      @db.Text
  createdAt      DateTime     @default(now())
}

model InvitationCode {
  id        String    @id @default(uuid())
  code      String    @unique
  usedBy    String?   @unique
  user      User?     @relation("UsedBy", fields: [usedBy], references: [id])
  createdBy String
  creator   User      @relation("CreatedBy", fields: [createdBy], references: [id])
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  isUsed    Boolean   @default(false)
}

